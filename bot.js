// bot.js
require('dotenv').config();
const fs = require('fs');
const { Telegraf, Markup } = require('telegraf');
const bot = new Telegraf(process.env.BOT_TOKEN);

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
const roles = {
  OWNER: 'owner',
  ADMIN: 'admin',
  MODERATOR: 'moderator',
  USER: 'user',
};

const OWNER_ID = parseInt(process.env.OWNER_ID);
const users = new Map(); // –•—Ä–∞–Ω–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∏—Ö —Ä–æ–ª–∏
let products = []; // –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤
let contacts = []; // –°–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
const feedbacks = []; // –°–ø–∏—Å–æ–∫ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏

const userStates = new Map(); // –•—Ä–∞–Ω–∏—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
let tempData = {}; // –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤/–∫–æ–Ω—Ç–∞–∫—Ç–æ–≤

// –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–æ–≤
function loadData() {
  if (fs.existsSync('products.json')) {
    products = JSON.parse(fs.readFileSync('products.json'));
  }
  if (fs.existsSync('contacts.json')) {
    contacts = JSON.parse(fs.readFileSync('contacts.json'));
  }
  if (fs.existsSync('users.json')) {
    const userList = JSON.parse(fs.readFileSync('users.json'));
    userList.forEach((u) => users.set(u.id, u));
  }
}

// –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª—ã
function saveData() {
  fs.writeFileSync('products.json', JSON.stringify(products, null, 2));
  fs.writeFileSync('contacts.json', JSON.stringify(contacts, null, 2));
  fs.writeFileSync('users.json', JSON.stringify(Array.from(users.values()), null, 2));
}

loadData();

// Middleware –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ä–æ–ª–∏ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
bot.use(async (ctx, next) => {
  if (!ctx.from) return;
  const { id, username } = ctx.from;
  if (!users.has(id)) {
    const role = id === OWNER_ID ? roles.OWNER : roles.USER;
    users.set(id, { id, username, role });
    saveData();
  }
  ctx.user = users.get(id);
  ctx.state = userStates.get(id) || 'default';
  return next();
});

const isAdmin = (ctx) => [roles.ADMIN, roles.MODERATOR, roles.OWNER].includes(ctx.user.role);
const isOwner = (ctx) => ctx.user.role === roles.OWNER;

// –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
function mainMenu(ctx) {
  userStates.set(ctx.from.id, 'default');
  return ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', Markup.keyboard([
    ['üì¶ –¢–æ–≤–∞—Ä—ã', 'üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã'],
    ['‚úâÔ∏è –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å'],
    ...(isAdmin(ctx) ? [['üõ† –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å']] : [])
  ]).resize());
}

// –ö–æ–º–∞–Ω–¥–∞ /start
bot.start((ctx) => mainMenu(ctx));

// –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤
bot.hears('üì¶ –¢–æ–≤–∞—Ä—ã', async (ctx) => {
  userStates.set(ctx.from.id, 'default');
  if (products.length === 0) return ctx.reply('–¢–æ–≤–∞—Ä—ã –ø–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã.');
  products.forEach((p, i) => ctx.reply(`${i + 1}. ${p.name} ‚Äî ${p.description}`));
});

// –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
bot.hears('üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã', async (ctx) => {
  userStates.set(ctx.from.id, 'default');
  if (contacts.length === 0) return ctx.reply('–ö–æ–Ω—Ç–∞–∫—Ç—ã –ø–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã.');
  contacts.forEach((c, i) => ctx.reply(`${i + 1}. ${c.name}: ${c.value}`));
});

// –†–∞–∑–¥–µ–ª –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
bot.hears('‚úâÔ∏è –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å', (ctx) => {
  const existing = feedbacks.find(f => f.from === ctx.from.id && !f.answered);
  if (existing) {
    return ctx.reply('–í—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–∂–¥–∏—Ç–µ—Å—å –æ—Ç–≤–µ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏.');
  }
  userStates.set(ctx.from.id, 'feedback');
  ctx.reply('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (—Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ, –≥–æ–ª–æ—Å–æ–≤–æ–µ, –≤–∏–¥–µ–æ –∏–ª–∏ —Ñ–∞–π–ª):');
});

// –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å
bot.hears('üõ† –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å', (ctx) => {
  if (!isAdmin(ctx)) return;
  userStates.set(ctx.from.id, 'admin');
  ctx.reply('–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å:', Markup.inlineKeyboard([
    [Markup.button.callback('‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä', 'add_product')],
    [Markup.button.callback('‚ûñ –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä', 'delete_product')],
    [Markup.button.callback('‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç', 'add_contact')],
    [Markup.button.callback('‚ûñ –£–¥–∞–ª–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç', 'delete_contact')],
    ...(isOwner(ctx) ? [[Markup.button.callback('üë§ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º–∏', 'manage_mods')]] : [])
  ]));
});

// –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞)
bot.action('manage_mods', (ctx) => {
  const mods = Array.from(users.values()).filter(u => u.role === roles.MODERATOR);
  let text = 'üë• –°–ø–∏—Å–æ–∫ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤:\n';
  mods.forEach((m, i) => {
    text += `${i + 1}. ${m.username || m.id}\n`;
  });
  ctx.reply(text, Markup.inlineKeyboard([
    [Markup.button.callback('‚ûï –ù–∞–∑–Ω–∞—á–∏—Ç—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞', 'add_mod')],
    [Markup.button.callback('‚ûñ –£–¥–∞–ª–∏—Ç—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞', 'remove_mod')]
  ]));
});

bot.action('add_mod', (ctx) => {
  userStates.set(ctx.from.id, 'add_mod');
  ctx.reply('–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º:');
});

bot.action('remove_mod', (ctx) => {
  userStates.set(ctx.from.id, 'remove_mod');
  ctx.reply('–í–≤–µ–¥–∏—Ç–µ ID –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:');
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –∏–∑ –∞–¥–º–∏–Ω–∫–∏
bot.action('add_product', async (ctx) => {
  userStates.set(ctx.from.id, 'add_product_name');
  ctx.reply('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:');
});

bot.action('delete_product', async (ctx) => {
  userStates.set(ctx.from.id, 'delete_product_index');
  ctx.reply('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–æ–≤–∞—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:');
});

bot.action('add_contact', async (ctx) => {
  userStates.set(ctx.from.id, 'add_contact');
  ctx.reply('–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∫–æ–Ω—Ç–∞–∫—Ç–∞:');
});

bot.action('delete_contact', async (ctx) => {
  userStates.set(ctx.from.id, 'delete_contact_index');
  ctx.reply('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–æ–Ω—Ç–∞–∫—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:');
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('message', async (ctx, next) => {
  const state = userStates.get(ctx.from.id);

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
  if (state === 'feedback') {
    const feedbackId = feedbacks.length;
    feedbacks.push({ from: ctx.from.id, msg: ctx.message, answered: false, date: new Date() });
    users.forEach((u) => {
      if (isAdmin({ user: u })) {
        const feedback = feedbacks[feedbackId];
        const username = ctx.from.username ? `@${ctx.from.username}` : ctx.from.id;
        const time = feedback.date.toLocaleString();
        bot.telegram.sendMessage(u.id, `üì® –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:\nüë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${username}\nüïí –í—Ä–µ–º—è: ${time}\n\n–°–æ–æ–±—â–µ–Ω–∏–µ:`,
          Markup.inlineKeyboard([
            [Markup.button.callback('–û—Ç–≤–µ—Ç–∏—Ç—å', `reply_${feedbackId}`)]
          ])
        );
        bot.telegram.copyMessage(u.id, ctx.chat.id, ctx.message.message_id);
      }
    });
    userStates.set(ctx.from.id, 'default');
    return ctx.reply('–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏.');
  }

  if (ctx.state === 'feedback') return;

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
  if (state === 'add_product_name') {
    tempData[ctx.from.id] = { name: ctx.message.text };
    userStates.set(ctx.from.id, 'add_product_desc');
    return ctx.reply('–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:');
  } else if (state === 'add_product_desc') {
    const { name } = tempData[ctx.from.id];
    products.push({ name, description: ctx.message.text });
    saveData();
    delete tempData[ctx.from.id];
    userStates.set(ctx.from.id, 'default');
    return ctx.reply('–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω.');
  }

  // –£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
  if (state === 'delete_product_index') {
    const index = parseInt(ctx.message.text) - 1;
    if (!isNaN(index) && products[index]) {
      const removed = products.splice(index, 1)[0];
      saveData();
      userStates.set(ctx.from.id, 'default');
      return ctx.reply(`–¢–æ–≤–∞—Ä "${removed.name}" —É–¥–∞–ª—ë–Ω.`);
    } else {
      return ctx.reply('–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–æ–≤–∞—Ä–∞.');
    }
  }

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞
  if (state === 'add_contact') {
    tempData[ctx.from.id] = { name: ctx.message.text };
    userStates.set(ctx.from.id, 'add_contact_value');
    return ctx.reply('–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞:');
  }

  if (state === 'add_contact_value') {
    const { name } = tempData[ctx.from.id];
    contacts.push({ name, value: ctx.message.text });
    saveData();
    delete tempData[ctx.from.id];
    userStates.set(ctx.from.id, 'default');
    return ctx.reply('–ö–æ–Ω—Ç–∞–∫—Ç –¥–æ–±–∞–≤–ª–µ–Ω.');
  }

  // –£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞
  if (state === 'delete_contact_index') {
    const index = parseInt(ctx.message.text) - 1;
    if (!isNaN(index) && contacts[index]) {
      const removed = contacts.splice(index, 1)[0];
      saveData();
      userStates.set(ctx.from.id, 'default');
      return ctx.reply(`–ö–æ–Ω—Ç–∞–∫—Ç "${removed.name}" —É–¥–∞–ª—ë–Ω.`);
    } else {
      return ctx.reply('–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∫–æ–Ω—Ç–∞–∫—Ç–∞.');
    }
  }

  // –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
  if (state === 'add_mod') {
    const id = parseInt(ctx.message.text);
    if (users.has(id)) {
      users.get(id).role = roles.MODERATOR;
      saveData();
      userStates.set(ctx.from.id, 'default');
      return ctx.reply('–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä –Ω–∞–∑–Ω–∞—á–µ–Ω.');
    }
    return ctx.reply('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.');
  }

  // –£–¥–∞–ª–µ–Ω–∏–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
  if (state === 'remove_mod') {
    const id = parseInt(ctx.message.text);
    if (users.has(id) && users.get(id).role === roles.MODERATOR) {
      users.get(id).role = roles.USER;
      saveData();
      userStates.set(ctx.from.id, 'default');
      return ctx.reply('–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä —É–¥–∞–ª—ë–Ω.');
    }
    return ctx.reply('–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.');
  }

  next();
});

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.launch();

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞
process.once('SIGINT', () => bot.stop('SIGINT'));
process.once('SIGTERM', () => bot.stop('SIGTERM'));
